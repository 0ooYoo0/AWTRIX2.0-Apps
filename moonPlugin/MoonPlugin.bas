B4J=true
Group=Default Group
ModulesStructureVersion=1
Type=Class
Version=4.2
@EndOfDesignText@
Sub Class_Globals
	Dim MainSettings As Map 'dont touch
	Private AppName As String = "moon" 'change plugin name (unique)
	Private tickInterval As Int= 1500
	Private needDownloads As Int = 0
	Private updateInterval As Int = 0 'force update after X seconds. 0 for systeminterval
	Private AppVersion As String="1.1"
	Dim commandList As List
	Dim Appduration As Int 'ignore
	Private appSettings As Map = CreateMap() 'needed Settings for this Plugin
	Private description As String= $"
	Actual Moon Phase - Get Today's Moon Phase with current viewing information<br />
	<small>Created by AWTRIX</small>
	"$
	
	Private setupInfos As String= $"
	
	
	
	"$

	Dim m4() As Int = Array As Int(0x0, 0x0, 0xb596, 0xb596, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x632c, 0xb596, 0xb596, 0xb596, 0x0, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0x632c, 0xb596, 0xb596, 0x632c, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0x632c, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0x9cd3, 0xb596, 0x0, 0xb596, 0x632c, 0xb596, 0xb596, 0x632c, 0xb596, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0xb596, 0x9cd3, 0x0, 0x0)
	Dim m0() As Int=Array As Int(0x0, 0x0, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0)
	Dim m7() As Int=Array As Int(0x0, 0x0, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0x632c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0x632c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0)
	Dim m6() As Int=Array As Int(0x0, 0x0, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x632c, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0xb596, 0x632c, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0x632c, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0)
	Dim m5() As Int=Array As Int(0x0, 0x0, 0xb596, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x632c, 0xb596, 0xb596, 0x0, 0x0, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0x0, 0x0, 0xb596, 0x632c, 0xb596, 0xb596, 0xb596, 0xb596, 0x0, 0x0, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0x632c, 0x0, 0x0, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0xb596, 0x632c, 0xb596, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0xb596, 0x0, 0x0, 0x0)
	Dim m3() As Int=Array As Int(0x0, 0x0, 0x0, 0xb596, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0xb596, 0x632c, 0xb596, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0xb596, 0xb596, 0x632c, 0xb596, 0x0, 0x0, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0xb596, 0x0, 0x0, 0xb596, 0xb596, 0xb596, 0x632c, 0xb596, 0xb596, 0x0, 0x0, 0xb596, 0xb596, 0xb596, 0xb596, 0x9cd3, 0xb596, 0x0, 0x0, 0x632c, 0xb596, 0xb596, 0x632c, 0xb596, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x9cd3, 0x0, 0x0)
	Dim m2() As Int=Array As Int(0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x632c, 0xb596, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0xb596, 0x632c, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x9cd3, 0xb596, 0x0, 0x0, 0x0, 0x0, 0xb596, 0x632c, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0x9cd3, 0x0, 0x0)
	Dim m1() As Int=Array As Int(0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x632c, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb596, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9cd3, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x632c, 0xb596, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9cd3, 0x0, 0x0)
End Sub

'Initializes the object. You can NOT add parameters to this method!
Public Sub Initialize() As String
	commandList.Initialize
	MainSettings.Initialize
	MainSettings.Put("interval",tickInterval) 										'übergibt AWTRIX die gewünschte tick-rate in ms. bei 0 wird der Tick nur einmalig aufgerufen
	MainSettings.Put("needDownload",needDownloads)
	setSettings
	
	Return "MyKey"
End Sub


' must be available
public Sub GetNiceName() As String
	Return AppName
End Sub

' must be available
public Sub Run(Tag As String, Params As Map) As Object
	Select Case Tag
		Case "start" 													'wird bei jedem start des Plugins aufgerufen und übergibt seine Settings an Awtrix
			If Params.ContainsKey("AppDuration") Then
				Appduration = Params.Get("AppDuration") 						'Kann zur berechnung von Zeiten verwendet werden 'ignore
			End If
			
			Return MainSettings
		Case "downloadCount"
			Return needDownloads
		Case "startDownload"
			Return startDownload(Params.Get("jobNr"))
		Case "httpResponse"
			Return evalJobResponse(Params.Get("jobNr"),Params.Get("success"),Params.Get("response"),Params.Get("InputStream"))
		Case "tick"
			commandList.Clear											'Wird in der eingestellten Tickrate aufgerufen
			Return genFrame
		Case "infos"
			Dim infos As Map
			infos.Initialize
			Dim data() As Byte
				If File.Exists(File.Combine(File.DirApp,"plugins"),AppName&".png") Then
				Dim in As InputStream
				in = File.OpenInput(File.Combine(File.DirApp,"plugins"),AppName&".png")
				Dim out As OutputStream
				out.InitializeToBytesArray(1000)
				File.Copy2(in, out)
				data = out.ToBytesArray
			out.Close
			End If
			infos.Put("pic",data)
			Dim isconfigured As Boolean=True
			If File.Exists(File.Combine(File.DirApp,"plugins"),AppName&".ax") Then
			Dim m As Map = File.ReadMap(File.Combine(File.DirApp,"plugins"),AppName&".ax")
				For Each v As Object In m.Values
				If v="null" Then
					isconfigured=False
						End If
					Next
				End If
			infos.Put("isconfigured",isconfigured)
			infos.Put("AppVersion",AppVersion)
			infos.Put("description",description)
			infos.Put("setupInfos",setupInfos)
			Return infos
		Case "setSettings"
			Return setSettings
		Case "getUpdateInterval"
			Return updateInterval
	End Select
	Return True
End Sub

'Called with every update from Awtrix,
Sub startDownload(nr As Int) As String
	Dim URL As String
	Select nr
		Case 1
			
	End Select
	Return URL
End Sub

'Is called when the JobHandler has downloaded the data.
Sub evalJobResponse(nr As Int,success As Boolean,response As String,InputStream As InputStream) As Boolean
Return True
End Sub

Sub genFrame As List
	
	commandList.Add(CreateMap("type":"bmp","x":0,"y":0,"bmp":gensky,"width":32,"height":8))

	
	Select MoonPhase
		Case 0
			commandList.Add(CreateMap("type":"bmp","x":13,"y":0,"bmp":m0,"width":8,"height":8))
		
		Case 1
			commandList.Add(CreateMap("type":"bmp","x":13,"y":0,"bmp":m1,"width":8,"height":8))
		Case 2
			commandList.Add(CreateMap("type":"bmp","x":13,"y":0,"bmp":m2,"width":8,"height":8))
		Case 3	
			commandList.Add(CreateMap("type":"bmp","x":13,"y":0,"bmp":m3,"width":8,"height":8))
		Case 4
			commandList.Add(CreateMap("type":"bmp","x":13,"y":0,"bmp":m4,"width":8,"height":8))
		Case 5
			commandList.Add(CreateMap("type":"bmp","x":13,"y":0,"bmp":m5,"width":8,"height":8))
		Case 6
			commandList.Add(CreateMap("type":"bmp","x":13,"y":0,"bmp":m6,"width":8,"height":8))
		Case 7
			commandList.Add(CreateMap("type":"bmp","x":13,"y":0,"bmp":m7,"width":8,"height":8))
	End Select
	
	
	Return commandList
End Sub



Sub setSettings As Boolean
	If File.Exists(File.Combine(File.DirApp,"plugins"),AppName&".ax") Then
		Dim m As Map = File.ReadMap(File.Combine(File.DirApp,"plugins"),AppName&".ax")
		For Each k As String In appSettings.Keys
			If Not(m.ContainsKey(k)) Then m.Put(k,appSettings.Get(k))
		Next
		File.WriteMap(File.Combine(File.DirApp,"plugins"),AppName&".ax",m)
		updateInterval=m.Get("updateInterval")
		'You need just change the following lines to get the values into your variables
		Profilename=m.Get("Profilename")
	Else
		Dim m As Map
		m.Initialize
		m.Put("updateInterval",updateInterval)
		For Each k As String In appSettings.Keys
			m.Put(k,appSettings.Get(k))
		Next
		File.WriteMap(File.Combine(File.DirApp,"plugins"),AppName&".ax",m)
	End If
	Return True
End Sub

Sub gensky As Int()
	Dim o(256) As Int
	For i=0 To o.Length-1
		o(i)=0
	Next
	For x=0 To 2	
		o(Rnd(0,255))=0xe73c
		o(Rnd(0,255))=0x3276
		o(Rnd(0,255))=0x4a69
	Next

	Return o
End Sub

Sub MoonPhase As String
	Dim c,e, b As Int
	Dim jd As Double

	Dim Year As Int = DateTime.GetYear(DateTime.Now)
	Dim Month As Int = DateTime.GetMonth(DateTime.Now)
	Dim Day As Int= DateTime.GetDayOfMonth(DateTime.Now)

	If (Month < 3) Then
		Year = Year - 1
		Month = Month + 12
	End If
	Month = Month + 1

	c = 365.25 * Year
	e = 30.6 * Month
	jd = c + e + Day - 694039.09
	jd = jd / 29.53
	b = jd
	jd = jd - b
	b = jd * 8 + 0.5
	b = Bit.And(b, 7)
	Return b
'	Select b
'		Case 0
'			Return "New"
'		Case 1
'			Return "Waxing Crescent"
'		Case 2
'			Return "First Quarter"
'		Case 3
'			Return "Waxing Gibbous"
'		Case 4
'			Return "Full"
'		Case 5
'			Return "Waning Gibbous"
'		Case 6
'			Return "Last Quarter"
'		Case 7
'			Return "Waning Crescent"
'	End Select
End Sub